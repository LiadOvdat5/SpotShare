// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(SpotShareDBContext))]
    [Migration("20250619191034_AddBookingsSet")]
    partial class AddBookingsSet
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Models.AvailabilitySlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<Guid>("GarageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("AvailabilitySlots");
                });

            modelBuilder.Entity("API.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateRequested")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<Guid>("GarageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("API.Models.Garage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PricePerHour")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Garages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaa1111-0000-0000-0000-000000000001"),
                            Address = "123 Main St, Metropolis",
                            DateCreated = new DateTime(2024, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Secure and covered parking in the city center. Close to everything.",
                            ImageUrl = "https://example.com/garage1.jpg",
                            IsActive = true,
                            Latitude = 40.7128f,
                            Longitude = -74.006f,
                            OwnerId = new Guid("11111111-aaaa-bbbb-cccc-111111111111"),
                            PricePerHour = 15.00m,
                            Title = "Downtown Covered Parking"
                        },
                        new
                        {
                            Id = new Guid("aaaa1111-0000-0000-0000-000000000002"),
                            Address = "456 Elm St, Uptown",
                            DateCreated = new DateTime(2024, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A quiet driveway spot available during business hours.",
                            ImageUrl = "https://example.com/garage2.jpg",
                            IsActive = true,
                            Latitude = 34.0522f,
                            Longitude = -118.2437f,
                            OwnerId = new Guid("22222222-bbbb-cccc-dddd-222222222222"),
                            PricePerHour = 10.00m,
                            Title = "Private Driveway Spot"
                        },
                        new
                        {
                            Id = new Guid("aaaa1111-0000-0000-0000-000000000003"),
                            Address = "789 Oak Ave, Midtown",
                            DateCreated = new DateTime(2024, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Underground parking with gate access and cameras.",
                            IsActive = false,
                            Latitude = 37.7749f,
                            Longitude = -122.4194f,
                            OwnerId = new Guid("33333333-cccc-dddd-eeee-333333333333"),
                            PricePerHour = 18.50m,
                            Title = "Underground Parking Lot"
                        },
                        new
                        {
                            Id = new Guid("aaaa1111-0000-0000-0000-000000000004"),
                            Address = "101 Central Blvd, Station City",
                            DateCreated = new DateTime(2024, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Perfect for commuters — safe parking right next to the train.",
                            ImageUrl = "https://example.com/garage4.jpg",
                            IsActive = true,
                            Latitude = 41.8781f,
                            Longitude = -87.6298f,
                            OwnerId = new Guid("44444444-dddd-eeee-ffff-444444444444"),
                            PricePerHour = 12.00m,
                            Title = "Garage Near Train Station"
                        });
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-aaaa-bbbb-cccc-111111111111"),
                            DateCreated = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alice@example.com",
                            FullName = "Alice Johnson",
                            PasswordHash = "hashed_password_1",
                            Phone = "555-1234",
                            Role = "User",
                            Username = "Alice1"
                        },
                        new
                        {
                            Id = new Guid("22222222-bbbb-cccc-dddd-222222222222"),
                            DateCreated = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bob@example.com",
                            FullName = "Bob Smith",
                            PasswordHash = "hashed_password_2",
                            Phone = "555-5678",
                            Role = "User",
                            Username = "Bob2"
                        },
                        new
                        {
                            Id = new Guid("33333333-cccc-dddd-eeee-333333333333"),
                            DateCreated = new DateTime(2024, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "charlie@example.com",
                            FullName = "Charlie Evans",
                            PasswordHash = "hashed_password_3",
                            Role = "User",
                            Username = "Charlie3"
                        },
                        new
                        {
                            Id = new Guid("44444444-dddd-eeee-ffff-444444444444"),
                            DateCreated = new DateTime(2024, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "diana@example.com",
                            FullName = "Diana Carter",
                            PasswordHash = "hashed_password_4",
                            Phone = "555-8765",
                            Role = "User",
                            Username = "Diana4"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
